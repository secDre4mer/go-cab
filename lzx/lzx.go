package lzx

import (
	"bufio"
	"io"
)

func New(reader io.Reader, windowSize int, resetInterval int) (io.Reader, error) {
	stream := &bitStream{Internal: bufio.NewReader(reader)}
	lzx := &Reader{stream: stream}
	if bit, err := stream.ReadBits(1); err != nil {
		return nil, err
	} else if bit != 0 {
		fileSize, err := stream.ReadBits(32)
		if err != nil {
			return nil, err
		}
		lzx.IntelFileSize = uint32(fileSize)
	}
	lzx.Window = NewWindow(windowSize)
	lzx.ResetInterval = resetInterval
	return lzx, nil
}

type Reader struct {
	stream *bitStream

	currentBlock io.Reader

	persistentData
}

func (l *Reader) Read(b []byte) (n int, err error) {
	for len(b) > 0 {
		if l.currentBlock == nil {
			nextBlock, err := readBlockHeader(l.stream, &l.persistentData)
			if err != nil {
				if err == io.EOF {
					err = io.ErrUnexpectedEOF
				}
				return n, err
			}
			l.currentBlock = &intelReader{
				Internal:       nextBlock,
				persistentData: &l.persistentData,
			}
		}
		blockReadN, err := l.currentBlock.Read(b)
		n += blockReadN
		if err != nil {
			if err == io.EOF {
				l.currentBlock = nil
			} else {
				return n, err
			}
		}
		b = b[blockReadN:]
	}
	return n, err
}

const (
	alignedTreeSize       = 8
	alignedTreeLengthSize = 3

	numChars    = 256
	preTreeSize = 20

	mainTreeSize = numChars + 290*8

	minMatch = 2

	secondaryNumElements = 249

	numPrimaryLengths = 7
)

var positionSlots = [11]uint16{
	30, 32, 34, 36, 38, 42, 50, 66, 98, 162, 290,
}

var positionBase = [290]uint32{
	0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512,
	768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576, 32768,
	49152, 65536, 98304, 131072, 196608, 262144, 393216, 524288, 655360,
	786432, 917504, 1048576, 1179648, 1310720, 1441792, 1572864, 1703936,
	1835008, 1966080, 2097152, 2228224, 2359296, 2490368, 2621440, 2752512,
	2883584, 3014656, 3145728, 3276800, 3407872, 3538944, 3670016, 3801088,
	3932160, 4063232, 4194304, 4325376, 4456448, 4587520, 4718592, 4849664,
	4980736, 5111808, 5242880, 5373952, 5505024, 5636096, 5767168, 5898240,
	6029312, 6160384, 6291456, 6422528, 6553600, 6684672, 6815744, 6946816,
	7077888, 7208960, 7340032, 7471104, 7602176, 7733248, 7864320, 7995392,
	8126464, 8257536, 8388608, 8519680, 8650752, 8781824, 8912896, 9043968,
	9175040, 9306112, 9437184, 9568256, 9699328, 9830400, 9961472, 10092544,
	10223616, 10354688, 10485760, 10616832, 10747904, 10878976, 11010048,
	11141120, 11272192, 11403264, 11534336, 11665408, 11796480, 11927552,
	12058624, 12189696, 12320768, 12451840, 12582912, 12713984, 12845056,
	12976128, 13107200, 13238272, 13369344, 13500416, 13631488, 13762560,
	13893632, 14024704, 14155776, 14286848, 14417920, 14548992, 14680064,
	14811136, 14942208, 15073280, 15204352, 15335424, 15466496, 15597568,
	15728640, 15859712, 15990784, 16121856, 16252928, 16384000, 16515072,
	16646144, 16777216, 16908288, 17039360, 17170432, 17301504, 17432576,
	17563648, 17694720, 17825792, 17956864, 18087936, 18219008, 18350080,
	18481152, 18612224, 18743296, 18874368, 19005440, 19136512, 19267584,
	19398656, 19529728, 19660800, 19791872, 19922944, 20054016, 20185088,
	20316160, 20447232, 20578304, 20709376, 20840448, 20971520, 21102592,
	21233664, 21364736, 21495808, 21626880, 21757952, 21889024, 22020096,
	22151168, 22282240, 22413312, 22544384, 22675456, 22806528, 22937600,
	23068672, 23199744, 23330816, 23461888, 23592960, 23724032, 23855104,
	23986176, 24117248, 24248320, 24379392, 24510464, 24641536, 24772608,
	24903680, 25034752, 25165824, 25296896, 25427968, 25559040, 25690112,
	25821184, 25952256, 26083328, 26214400, 26345472, 26476544, 26607616,
	26738688, 26869760, 27000832, 27131904, 27262976, 27394048, 27525120,
	27656192, 27787264, 27918336, 28049408, 28180480, 28311552, 28442624,
	28573696, 28704768, 28835840, 28966912, 29097984, 29229056, 29360128,
	29491200, 29622272, 29753344, 29884416, 30015488, 30146560, 30277632,
	30408704, 30539776, 30670848, 30801920, 30932992, 31064064, 31195136,
	31326208, 31457280, 31588352, 31719424, 31850496, 31981568, 32112640,
	32243712, 32374784, 32505856, 32636928, 32768000, 32899072, 33030144,
	33161216, 33292288, 33423360,
}

var extraBits = [36]int{
	0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
	9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,
}
